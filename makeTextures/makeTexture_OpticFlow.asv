function makeTexture_OpticFlow

%stimuli: basic set described in Duffy & Wurtz 91 - translation, circular
%and radial motion; also added random condition

%to allow the looper to work, this has a list of condition numbers rather
%than trying to more directly code direction etc
%condition list:
%0 - random
%1-8 - planar in steps of 45
%9 - rotation cw
%10 - rotation ccw
%11 - radial expansion
%12 - radial contraction
%no coherences

global  Mstate DotFrame screenNum loopTrial;


%get parameters
P = getParamStruct;

%get screen settings
screenRes = Screen('Resolution',screenNum);
fps=screenRes.hz;      % frames per second


%size parameters
stimSize=[P.x_size P.y_size];
stimSizePx(1)=deg2pix(P.x_size,'round');
stimSizePx(2)=deg2pix(P.y_size,'round');
maskradiusPx=deg2pix(P.mask_radius,'round');

%divide stimulus areas into 10x10 bins
Nbins=10;
xbins=linspace(-stimSizePx(1)/2,stimSizePx(1)/2,Nbins+1);
ybins=linspace(-stimSizePx(2)/2,stimSizePx(2)/2,Nbins+1);
widthXbin=stimSizePx(1)/Nbins;
widthYbin=stimSizePx(2)/Nbins;


%figure out nr dots per bin (this is in deg)
areaBinDeg=stimSize(1)/Nbins*stimSize(2)/Nbins;
dotsBin=round(P.dotDensity*areaBinDeg);
nrDots=dotsBin*Nbins^2;

%dot displacement
if P.stimType==9 || P.stimType==10 
    %different speed for rotating stimulus
    %average speed for a circular motion: v=dtheta/dt *r
    %we use the parameter to fix the speed at the halfway point (even
    %though that is not necessarily half the dots)
    deltaFrame=P.speedDots/(P.stimRadius/2)*(1/fps);
elseif P.stimType==11 || P.stimType==12
    %for the radial stimuli, we again use the setting to get the speed at
    %the halfway point right
    %deltaFrame will need to be multiplied with r 
    deltaFrame=2/P.stimRadius*P.speedDots/fps;
else
    deltaFrame = deg2pix(P.speedDots,'none')/fps;
end


%initialize random number generate to time of date
s = RandStream.create('mrg32k3a','NumStreams',1,'Seed',datenum(date)+1000*str2double(Mstate.unit)+str2double(Mstate.expt)+loopTrial);

%initialize dot positions
%for this module, we handle dot density by controlling the number of dots
%in each bin (wrap around for the radial condition otherwise is too
%complicated)
%to keep things consistent, we initiate dots that way, and handle both
%lifetime and dot replacements this way

xpos=[];
ypos=[];
for i=2:length(xbins)
    for j=2:length(ybins)        
        randpos=rand(s,2,dotsBin); %this gives numbers between 0 and 1
        xpos=[xpos (randpos(1,:)*(xbins(i)-xbins(i-1)))+xbins(i-1)];
        ypos=[ypos (randpos(2,:)*(ybins(j)-ybins(j-1)))+ybins(j-1)];
    end
end
xypos=[xpos;ypos];
        
%initialize lifetime vector - between 1 and dotLifetimte
if P.dotLifetime>0
    randlife=randi(s,P.dotLifetime,nrDots,1);
    lifetime=randlife;
end

%figure out how many frames - we use the first and the last frame to be
%shown in the pre and postdelay, so only stimulus duration matters here
nrFrames=ceil(P.stim_time*fps);


%now generate dot coordinates for all frames
DotFrame={};
tmpFrame={};

for i=1:nrFrames
  
    %no wrap around for any of the conditions; instead, we remove dots and
    %replace them bassed on density in the 10 x 10 bins
      
    if P.stimType==0 %random motion
                
        %random orientation vector
        ori=rand(s,[1 nrDots])*2*pi;
        
        %move dots
        xypos(1,:)=xypos(1,:)+deltaFrame.*cos(ori);
        xypos(2,:)=xypos(2,:)-deltaFrame.*sin(ori);
        
    elseif P.stimType>=1 && P.stimType<=8 %translation, 45 deg steps
        dotdir=45*(P.stimType-1);
        xypos(1,:)=xypos(1,:)-deltaFrame*cos(dotdir*pi/180);
        xypos(2,:)=xypos(2,:)-deltaFrame*sin(dotdir*pi/180);
             
            
    elseif P.stimType>=9 && P.stimType<=10 % rotation, cw and ccw
            
        %in this case speed is angular speed
        %no wrap around procedure necessary here
            
        %half the number of dots are contained within a circle of
        %radius 1/sqrt(2)*stimRadius
                    
        %now compute movement stuff - first get radius and angle
        [th,rad]=cart2pol(xypos(1,:),xypos(2,:));
            
        %result of cart2pol has theta in radians, with 0 to pi = 0 to
        %180, and -pi to 0 = 180 to 360; transform to 0 to 2pi
        idx2=find(th<0);
        th(idx2)=2*pi+th(idx2);
            
        %9 - cw, 10 - ccw
        if P.stimType==9
            th=th+deltaFrame;
        else
            th=th-deltaFrame;
        end           
        %go back to cartesian
        [xtemp,ytemp]=pol2cart(th,rad);
        xypos(1,:)=xtemp;
        xypos(2,:)=ytemp;
            
    else %radial pattern - 11 expansion, 12 contraction      
        
        %we model the contracting dot pattern as an expanding one and then
        %reverse the order - otherwise we'd have to figure out a minimal
        %radius at which to remove the dots; easier to deal with dots that
        %have moved too far away
            
        [th,rad]=cart2pol(xypos(1,:),xypos(2,:));
                                   
        rad=rad+rad*deltaFrame;
            
        %go back to cartesian
        [xtemp,ytemp]=pol2cart(th,rad);
        xypos(1,:)=xtemp;
        xypos(2,:)=ytemp;

    end
    
    %check lifetime (unless inf)
    if P.dotLifetime>0
        idx=find(lifetime==0); 
        %remove those dots
        xypos(:,idx)=[];
       
        lifetime=lifetime-1;
        lifetime(idx)=P.dotLifetime;
    end
    
    %now remove all of the dots outside of the stimulus area
    idx=find(abs(xypos(1,:))>stimSizePx(1)/2 | abs(xypos(2,:))>stimSizePx(2)/2);
    xypos(:,idx)=[];
    
    %replace dots - check for number of dots in bins and refill accordingly
    for i=2:length(xbins)
        for j=2:length(ybins)
            %figure out how many dots are in bin
            idx=find(xypos(1,:)-xbins(i)<=widthXbin && xypos(2,:)-ybins(j)<=widthYbin);
            Nmiss=dotsBin-length(idx);
            if Nmiss>0
                randpos=rand(s,2,Nmiss); %this gives numbers between 0 and 1
                
        xpos=[xpos (randpos(1,:)*(xbins(i)-xbins(i-1)))+xbins(i-1)];
        ypos=[ypos (randpos(2,:)*(ybins(j)-ybins(j-1)))+ybins(j-1)];
    end
end
   
    
    %make sure to only keep dots inside the stimulus radius
    [~,rad]=cart2pol(xypos(1,:),xypos(2,:));
    idx=find(rad<stimRadiusPx);
    
    if P.stimType==12 %we still need to reverse the order for the contracting stimuli
        tmpFrame{i}=xypos(:,idx);
    else
        DotFrame{i}=xypos(:,idx);
    end
   
end

if P.stimType==12
    for i=1:nrFrames
        DotFrame{i}=tmpFrame{nrFrames-i+1};
    end
end
