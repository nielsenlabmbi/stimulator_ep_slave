function playTexture_PerGratingManual

global  screenPTR screenNum 

global Gtxtr   %Created in makeGratingTexture


P = getParamStruct;

screenRes = Screen('Resolution',screenNum);


%define the list of parameters that can be accessed with the mouse and
%their settings
symbList = {'ori','s_freq','t_period','mask_radius','s_profile'};
valdom{1} = 0:10:350;
valdom{2} = logspace(log10(.01),log10(10),20);
valdom{3} = logspace(log10(.5),log10(10),20);  %Hz
valdom{3} = round(fliplr(screenRes.hz./valdom{3}));  %frames
valdom{4} = logspace(log10(.5),log10(60),20);
valdom{5} = {'sin','square'};

%set starting value and symbol 
state.valId = [10 10 5 8 1];  %Current index for each value domain
state.symId = 1;  %Current symbol index

%update the parameters
for i = 1:length(valdom)
    symbol = symbList{i};
    val = valdom{i}(state.valId(i));
    updatePstate(symbol,num2str(val));
end
xsize = 2*valdom{4}(state.valId(4));  %width = 2*radius
ysize = xsize;
updatePstate('x_size',num2str(xsize));
updatePstate('y_size',num2str(ysize));

%initialize texture
makeTexture_PerGrating %this populates Gtxtr and Masktxtr

%initialize text
symbol = symbList{state.symId};
val = valdom{state.symId}(state.valId(state.symId));
newtext = [symbol ' ' num2str(val)];

%generate mask
stimsize=2*sqrt((xsize/2).^2+(ysize/2).^2); %this is the size of the grating generated by makeTexture
stimsizeN=deg2pix(stimsize,'round');
maskSize.height=stimsizeN;
maskSize.width=stimsizeN;
mask=makeMask(maskSize,round(stimsizeN/2),round(stimsizeN/2),deg2pix(xsize,'round'),deg2pix(ysize,'round'),1,'none');
mtxtr = Screen(screenPTR, 'MakeTexture', mask,[],[],2); 

%initialize screen
Screen(screenPTR, 'FillRect', 0.5)
Screen(screenPTR,'DrawText','ori 0',40,30,1);
Screen('Flip', screenPTR);


%start the actual loop
bLast = [0 0 0];
keyIsDown = 0;
TextrIdx = 1;
while ~keyIsDown
    
    [mx,my,b] = GetMouse(screenPTR);
    b=b(1:3);
    
    db = bLast - b; %'1' is a button release
           
    %%%Case 1: Left Button:  decrease value%%%
    if ~sum(abs([1 0 0]-db))  
        
        symbol = symbList{state.symId};
        if state.valId(state.symId) > 1
            state.valId(state.symId) = state.valId(state.symId) - 1;
        end       
        
        val = valdom{state.symId}(state.valId(state.symId));
        
        if strcmp(symbol,'s_profile')
            updatePstate(symbol,val);
            newtext = [symbol ' ' val];
        else
            updatePstate(symbol,num2str(val));
            newtext = [symbol ' ' num2str(val)];
        end
        
        if strcmp(symbol,'mask_radius')
            %update size
            xsize = 2*valdom{4}(state.valId(4));  %width = 2*radius
            ysize = xsize;
            updatePstate('x_size',num2str(xsize));
            updatePstate('y_size',num2str(ysize));
            
            %generate new mask
            stimsize=2*sqrt((xsize/2).^2+(ysize/2).^2); %this is the size of the grating generated by makeTexture
            stimsizeN=deg2pix(stimsize,'round');
            maskSize.height=stimsizeN;
            maskSize.width=stimsizeN;
            mask=makeMask(maskSize,round(stimsizeN/2),round(stimsizeN/2),deg2pix(xsize,'round'),deg2pix(ysize,'round'),1,'none');
            mtxtr = Screen(screenPTR, 'MakeTexture', mask,[],[],2);
        end
        
        
        makeTexture_PerGrating
        TextrIdx = 1;
               
        Screen(screenPTR,'DrawText',newtext,40,30,1);
        Screen('Flip', screenPTR);
    end
    
    %%%Case 2: Middle Button:  change parameter%%%
    if ~sum(abs([0 0 1]-db))  % [0 0 1] is the scroll bar in the middle
        
        state.symId = state.symId+1; %update the symbol
        if state.symId > length(symbList)
            state.symId = 1; %unwrap
        end
        symbol = symbList{state.symId};
        val = valdom{state.symId}(state.valId(state.symId));
        
        if strcmp(symbol,'s_profile')
            newtext = [symbol ' ' val];
        else
            newtext = [symbol ' ' num2str(val)];
        end
        
        TextrIdx = 1;
        
        Screen(screenPTR,'DrawText',newtext,40,30,1);
        Screen('Flip', screenPTR);
    end
    
    %%%Case 3: Right Button: increase value%%%
    if ~sum(abs([0 1 0]-db))  %  [0 1 0]  is right click
        
        symbol = symbList{state.symId};
        if state.valId(state.symId) < length(valdom{state.symId})
            state.valId(state.symId) = state.valId(state.symId) + 1;
        end
      
        val = valdom{state.symId}(state.valId(state.symId));        
        
        if strcmp(symbol,'s_profile')
            updatePstate(symbol,val);
            newtext = [symbol ' ' val];
        else
            updatePstate(symbol,num2str(val));
            newtext = [symbol ' ' num2str(val)];
        end
        
        if strcmp(symbol,'mask_radius')
            %update size
            xsize = 2*valdom{4}(state.valId(4));  %width = 2*radius
            ysize = xsize;
            updatePstate('x_size',num2str(xsize));
            updatePstate('y_size',num2str(ysize));
            
            %generate new mask
            stimsize=2*sqrt((xsize/2).^2+(ysize/2).^2); %this is the size of the grating generated by makeTexture
            stimsizeN=deg2pix(stimsize,'round');
            maskSize.height=stimsizeN;
            maskSize.width=stimsizeN;
            mask=makeMask(maskSize,round(stimsizeN/2),round(stimsizeN/2),deg2pix(xsize,'round'),deg2pix(ysize,'round'),1,'none');
            mtxtr = Screen(screenPTR, 'MakeTexture', mask,[],[],2);
        end
        
        TextrIdx = 1;
        
        makeTexture_PerGrating
        
        Screen(screenPTR,'DrawText',newtext,40,30,1);
        Screen('Flip', screenPTR);
    end
    
    TextrIdx = TextrIdx+1;

    pixpercycle=deg2pix(1/P.s_freq,'none');
    shiftperframe=pixpercycle/P.t_period;
    xoffset = mod((TextrIdx-1)*shiftperframe+P.phase/360*pixpercycle,pixpercycle);
    stimSrc=[xoffset 0 xoffset + stimsizeN stimsizeN];
    
    
    xL = mx-(ceil(TDim(2)/2)-1);
    xR = mx+floor(TDim(2)/2);
    yL = my-(ceil(TDim(1)/2)-1);
    yR = my+floor(TDim(1)/2);
    StimLoc = [xL yL xR yR]';
    
    ori = valdom{1}(state.valId(1));
    
    Screen('BlendFunction', screenPTR, GL_SRC_ALPHA, GL_ONE);
    Screen('DrawTexture', screenPTR, Gtxtr(1), stimSrc, stimDst,ori,[],0.5);
    
    %add mask
    Screen('BlendFunction', screenPTR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    Screen('DrawTexture', screenPTR, mtxtr,[],stimDst);
    
    Screen('DrawTextures', screenPTR,Gtxtr(TextrIdx),StimPiece,StimLoc);    
    Screen(screenPTR,'DrawText',newtext,40,30,255-255*floor(valdom{5}(state.valId(5))/255));
    xypos = ['x ' num2str(mx) '; y ' num2str(my)];
    Screen(screenPTR,'DrawText',xypos,40,55,255-255*floor(valdom{5}(state.valId(5))/255));
    Screen('Flip', screenPTR);
    
    bLast = b;
    
    keyIsDown = KbCheck(-1);
    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Screen(screenPTR, 'FillRect', 0.5)
Screen(screenPTR, 'Flip');


